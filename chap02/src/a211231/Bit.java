package a211231;

public class Bit {
	public static void main(String[] args) {
		// 25
		//
		//
		/* 10진법(사용가능한 숫자 0~9)
		 *		7
		 *		8
		 *		9
		 *	   10
		 * (올림1+초기값0 해서 10이 됨)
		 * 	   11
		 *     12
		 *     .
		 *     .
		 *     .
		 *     18
		 *     19
		 * 	   20    
		 * (올림1에+1 초기값0 해서 20이 됨)
		 * ----------------------
		 * 				2진법(사용가능한 숫자 0,1)
		 * 					0
		 * 					1
		 * 		3	=	   10
		 * 				(2쓸 수 없어서 올림1에 초기값0 해서 10이 됨)
		 * 				   11 //2가 안되니까 또올림
		 * 		5   =	  100
		 * 				(올림)
		 * 				  101
		 * 				  111
		 * 		8   =	 1000
		 * 				 1001
		 * 		10  =	 1010
		 * 				 1011
		 * 				 1100
		 * 				 .
		 * 				 .
		 * 		16  =    10000
		 *												2^10
		 * 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536 ... 
		 * 
		 * 25 만드는 법
		 * 1, 8, 16의 합 = 25
		 * 
		 * 300[10]
		 * 256 128 64 32 16 8 4 2 1
		 *   1   0  0  1  0 1 1 0 0
		 *   
		 * 
		 * 65를 2진법으로 = 1000001
		 * (사용하면 1 사용안하면 0)
		 * 1, 64
		 * 64 32 16 8 4 2 1
		 *  1  0  0 0 0 0 1
		 *  
		 *  94를 2진법으로 = 1011110 
		 * 1, 64
		 * 64 32 16 8 4 2 1
		 *  1  0  1 1 1 1 0
		 *  
		 *  12[10]
		 *  8 4
		 *  1 1 0 0
		 *  
		 *  10101[2] = 21
		 *   1  0  1  0  1
		 * '16' 8 '4' 2 '1'
		 *  
		 *  10진수가 소수점이들어가면 2진법으로 변환하기 개까다로움 (월요일에 배울내용)
		 *  		
		 *  0000~9999 10^4
		 *  0000~1111 2^4
		 *  AAAA~ZZZZ 26^4
		 *  → 경우의 수 계산 Math.pow(26, 4)
		 */
		
		
		System.out.println(Math.pow(26, 4)); //456976.0
		System.out.println(Math.pow(82, 8)); //2.044140858654976E15 -> E=10 -> E15 = 10을 15번곱함
		//brute-force attack (무차별 대입 공격) : 특정한 암호를 풀기 위해 가능한 모든 값을 대입하는 것
		
		
		System.out.println(0b100_000); //32
		System.out.println(0b1011110); //94
		System.out.println(0b100101100); //300
		System.out.println(0b1010101100); //1254[8]=684[10]=2AC[16]
		
		//10진수를 2진수로
		System.out.println(Integer.toBinaryString(246));
		
		//10진수를 8진수로
		System.out.println(Integer.toOctalString(246));
		
		//10진수를 16진수로
		System.out.println(Integer.toHexString(246));
		
		/*
		 * 55[10]
		 * 110111[2]
		 * 32,16,8x,4,2,1
		 * 
		 * 1001001[2]
		 * 1+8+64 = 73
		 * 
		 * 456[10]
		 * = 400 + 50 + 6
		 * = (4 * 100) + (5 * 10) + (6 * 1)
		 * = (4 * 10^2) + (5 * 10^1) + (6 * 1^0) 
		 * >>>256+128+64+8
		 * 1_1100_1000[2]
		 * =0001_1100_1000
		 * 1C8
		 *  
		 * 1100[2]
		 * = 1000 + 100 + 0 + 0
		 * = 1000 + 100 (0생략)
		 * = (1 * 2^3) + (1 * 2^2)
		 *
		 * 77[8]
		 * = 70 + 7
		 * = ( 7 * 8^1) + 7
		 * = 63
		 * >>> (7)
		 * 111_111[2]
		 * 
		 * CA[16]
		 * = C0 + A
		 * = (12 * 16) + 10
		 * = 202
		 * >>>
		 * 1100_1010[2]
		 */
		
//		0b숫자 --> 2진수
//		0숫자 --> 8진수
//		0x숫자 --> 16진수
		
//		 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536 ... 
		System.out.println(Integer.toBinaryString(55)); //55를 2진수로 
		// 110111
		System.out.println(Integer.toOctalString(97)); //97을 8진수로
		// 1_100_001[2]
		// 1_4  _  1
		// = 141
		System.out.println(Integer.toHexString(99)); //99를 16진수로
		// 0110_0011 
		//  42 _  21-> 63 (2진수로 변환 후 계산 하는게 더 편함)
	//	System.out.println(0b1001001);
	//	System.out.println(0b11001010);
	//	System.out.println(077);
	//	System.out.println(0xCA);
		System.out.println(0b1100001);
	}

}
