package a220114;

public class ObjectorientedLanguage { 
	
	// 자바 배열을 사용한 선택 정렬, 삽입 정렬 구현
	// 생각 정리
	
	
	/*
	 * 객체지향언어의 역사
	 * 초창기에는 주로 모의시험(simulation)목적
	 * 
	 * 객체지향이론의 기본 개념
	 * - 실제 세계는 사물(객체)로 이루어져 있으며, 발생하는 모든 사건들은 사물간 상호작용
	 * 
	 * 초반엔 FORTRAN & COBOL같은 절차적 언어들이 주류였지만
	 * 1990년대 말에 인터넷의 발전과 함께 크게 유행하면서
	 * 객체지향언어가 주류로 자리잡음
	 *
	 * 
	 * 1. 코드의 재사용성이 높다 (기존코드 이용하여 쉽게 작성)
	 * 2. 코드의 관리가 용이하다 (적은 노력으로 쉽게 변경)
	 * 3. 신뢰성 높은 프로그래밍 (제어자와 메서드를 이용해서 데이터보호&올바른 값유지)
	 * 
	 */
	
		
	/* [클래스]
	 * 클래스와 객체 (제품설계도와 제품과의 관계라고 이해하면 쉽다)
	 * 
	 * 클래스의 정의 : 객체를 정의해 놓은것. 객체의 설계도 또는 틀
	 * 클래스의 용도 : 클래스는 객체를 생성하는데 사용된다.
	 * 
	 * 클래스는 단지 객체를 생성하는데 사용될 뿐, 객체 그 자체는 아니다.
	 * 객체는 클래스에 정의된 대로 생성
	 */ 
	 
	
	 /* [객체]
	 * 객체의 정의 : 실제로 존재하는 것 
	 * 객체의 용도 : 객체가 가지고 있는 기능과 속성에 따라 다름
	 *   1) 유형의 객체 : 책상 의자 자동차 TV와 같은 사물
	 *   2) 무형의 객체 : 수학공식, PG error같은 논리나 개념
	 *   
	 * 프로그래밍에서의 객체는 클래스에 정의된 내용대로 "메모리에 생성된 것"을 뜻한다
	 * 
	 * [객체의 구성요소]
	 * 
	 * 객체의 멤버 : 객체가 가지고 있는 속성과 기능
	 * 
	 * 속성(property) : 멤버변수(member variable), 특성(attribute), 필드(field), 상태(state)
	 * 					많이쓰는거 멤버변수랑 필드
	 * 
	 * 기능(funtion)  : 메서드(method), 함수(function), 행위(behavior)
	 * 
	 */
	
//	Tv로 예시
//	TV의 속성 : 전원상태, 크기, 길이, 높이, 색상, 볼륨 등 ==> 멤버변수
//	TV의 기능 : 켜기, 끄기, 볼륨높이기, 채널변경 등 	  ==> 메서드
	
//	위를 토대로 Tv클래스를 만들어보면 다음과 같다
//	class Tv{
//		String color; 		//색 
//		boolean power;		//전원상태 ==> on | off 두가지라 불린
//		int channel;		//채널
//		
//		void power()		//{power = !power;} ==> 기존 값이 false면 !power니까 좌변에는 true로 들어감
//		void channelUp()	//{channel++;}
//		void channelDown()  //{channel--;}
//	}
		
	
//	[참고]
//	멤버변수와 메서드 선언에 순서는 관계없지만 일반적으로는 메서드보다는 멤버변수 먼저 선언 후
//	멤버변수끼리 메서드끼리 모아놓는 것이 일반적
	
	
//	heap에 만들어진 그 녀석 == 객체

//	우리가 TV를 보기 위해서는 객체가 필요한것이지 클래스가 필요한 것은 아니며
//	클래스는 단지 객체를 만드는데만 사용될 뿐이다
	
//	프로그래밍에서는 먼저 클래스를 작성한 다음 클래스로부터 객체를 생성하여 사용한다.
//	클래스를 정의하고 클래스를 통해 객체를 생성하는이유 : 설계도를 통해 제품을 만드는이유와 같다
//														  하나의 설계도만 잘만들어놓으면 매번 고민할 필요없이 설계도대로 하면 됨
	
//	객체를 사용한다 : 객체가 가지고있는 속성과 기능을 사용한다
//	객체는 모든 인스턴스를 대표하는 포괄적 의미를 갖고있음

	
	/* [인스턴스]
	 * 클래스의 인스턴스화(instantiate) : 클래스로부터 객체를 만드는 과정
	 * 인스턴스(instance) : 어떤 클래스로부터 만들어진 객체 
	 * 인스턴스화 == 개별화
	 */
	
//	Tv클래스로부터 만들어진 객체를 "Tv클래스의 인스턴스"라고 한다.
	
//책상은 인스턴스다 보다는 책상은 객체다
//책상은 책상클래스의 객체다 보다는 책상은 책상클래스의 인스턴스다
//라고 하는것이 더 자연스러움
	
	
	
}
